generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  name              String
  role              Role
  landlord          Landlord?
  tenant            Tenant?
  isVerified        Boolean   @default(false)
  verificationToken String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  profileImage      String?
  Chat              Chat[]
}

model Landlord {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id])
  userId        Int            @unique
  listings      Property[]
  conversations Conversation[]
}

model Tenant {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id])
  userId        Int            @unique
  searches      Search[]
  conversations Conversation[]
}

model Property {
  id            Int            @id @default(autoincrement())
  address       String
  city          String
  state         String
  price         Float
  bedrooms      Int
  bathrooms     Int
  landlord      Landlord       @relation(fields: [landlordId], references: [id])
  landlordId    Int
  description   String?
  media         Media[] // This now includes both images and videos
  createdAt     DateTime       @default(now())
  conversations Conversation[]
  liveEnabled   Boolean        @default(false)
  liveDate      DateTime?
  liveDuration  Int?
  liveTitle     String?
}

model Media {
  id         Int      @id @default(autoincrement())
  url        String
  type       String // Can be 'image' or 'video'
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Search {
  id           Int       @id @default(autoincrement())
  location     String
  minPrice     Float
  maxPrice     Float
  bedrooms     Int?
  bathrooms    Int?
  propertyType String?
  sortOrder    SortOrder @default(ASC)
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
  tenantId     Int
  createdAt    DateTime  @default(now())
}

model Conversation {
  id         Int      @id @default(autoincrement())
  landlord   Landlord @relation(fields: [landlordId], references: [id])
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])
  landlordId Int
  tenantId   Int
  propertyId Int
  messages   Chat[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([landlordId, tenantId, propertyId])
}

model Chat {
  id             Int           @id @default(autoincrement())
  message        String
  messageType    MessageType
  createdAt      DateTime      @default(now())
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  conversationId Int
  userId         Int
  status         MessageStatus @default(SENT)
  user           User          @relation(fields: [userId], references: [id]) // Use 'user' here
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum Role {
  LANDLORD
  TENANT
}

enum SortOrder {
  ASC
  DESC
}
